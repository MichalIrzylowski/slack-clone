generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ChannelMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum NotificationLevel {
  ALL
  MENTIONS
  NONE
}

model Channel {
  id              String              @id @default(cuid())
  name            String              @unique
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  isPrivate       Boolean             @default(false)
  deletedAt       DateTime?
  archivedAt      DateTime?
  createdByUserId String?
  memberships     ChannelMembership[]
  messages        Message[]           @relation("ChannelMessages")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  username         String              @unique
  passwordHash     String
  role             UserRole            @default(USER)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  memberships      ChannelMembership[]
  sentMessages     Message[]           @relation("SentMessages")
  receivedMessages Message[]           @relation("ReceivedMessages")
}

model ChannelMembership {
  id                 String            @id @default(cuid())
  channelId          String
  userId             String
  role               ChannelMemberRole @default(MEMBER)
  joinedAt           DateTime          @default(now())
  lastReadAt         DateTime?
  isMuted            Boolean           @default(false)
  isStarred          Boolean           @default(false)
  notificationsLevel NotificationLevel @default(ALL)
  channel            Channel           @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@index([userId])
  @@index([channelId])
}

model Message {
  id                String    @id @default(cuid())
  authorId          String
  channelId         String?
  recipientUserId   String?
  serializedMessage String
  plainTextMessage  String
  htmlMessage       String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  isSilentDeleted   Boolean   @default(false)

  author        User     @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade)
  channel       Channel? @relation("ChannelMessages", fields: [channelId], references: [id])
  recipientUser User?    @relation("ReceivedMessages", fields: [recipientUserId], references: [id])

  @@index([channelId])
  @@index([recipientUserId])
  @@index([authorId])
  @@index([channelId, createdAt])
  @@index([authorId, recipientUserId, createdAt])
}
