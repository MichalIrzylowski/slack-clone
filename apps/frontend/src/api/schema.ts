/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_getHello"];
  };
  "/channels": {
    /** List channels with optional search and pagination */
    get: operations["ChannelController_list"];
    /** Create a new channel */
    post: operations["ChannelController_create"];
  };
  "/channels/{id}": {
    /** Soft delete a channel */
    delete: operations["ChannelController_remove"];
    /** Update a channel */
    patch: operations["ChannelController_update"];
  };
  "/users": {
    /** Get all users (auth required) */
    get: operations["UsersController_findAll"];
    /** Create a new user (ADMIN only) */
    post: operations["UsersController_create"];
  };
  "/auth/init-admin": {
    /** Initialize the first admin user (only when no users exist) */
    post: operations["AuthController_initAdmin"];
  };
  "/auth/login": {
    /** Login and obtain a JWT access token */
    post: operations["AuthController_login"];
  };
  "/auth/register": {
    /** Register a new user (ADMIN only) */
    post: operations["AuthController_register"];
  };
  "/auth/me": {
    /** Get current authenticated user profile */
    get: operations["AuthController_me"];
  };
  "/auth/admin-check": {
    /** Verify current user has ADMIN role */
    get: operations["AuthController_adminCheck"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ChannelDto: {
      /** @example abc123 */
      id: string;
      /** @example general */
      name: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description Whether channel is private */
      isPrivate: boolean;
      /** Format: date-time */
      deletedAt: string | null;
      /** Format: date-time */
      archivedAt: string | null;
      createdByUserId: string | null;
    };
    ChannelListDto: {
      items: components["schemas"]["ChannelDto"][];
      /** @example nextCursorId123 */
      nextCursor: string | null;
    };
    CreateChannelDto: {
      /** @description Channel display name */
      name: string;
      /**
       * @description Whether the channel is private
       * @default false
       */
      isPrivate?: boolean;
    };
    UpdateChannelDto: {
      /** @description New channel name */
      name?: string;
      /** @description Change privacy status */
      isPrivate?: boolean;
      /** @description Archive/unarchive channel */
      archived?: boolean;
    };
    UserDto: {
      /**
       * @description Unique user identifier
       * @example cuid123
       */
      id: string;
      /**
       * @description Display name (mirrors username)
       * @example johndoe
       */
      name: string;
      /**
       * @description User email (unique)
       * @example john@example.com
       */
      email: string;
      /**
       * @description Role of the user (ADMIN|USER)
       * @example ADMIN
       */
      role: string;
    };
    CreateManagedUserDto: {
      /**
       * @description Email of the new user
       * @example user@example.com
       */
      email: string;
      /** @description Temporary password (will be hashed) */
      password: string;
      /** @description Optional display name */
      name?: string;
      /**
       * @description Role to assign (admin|member)
       * @example member
       */
      role: string;
    };
    CreateUserDto: {
      /**
       * @description User email (unique)
       * @example user@example.com
       */
      email: string;
      /** @description Username (unique) */
      username: string;
      /** @description Optional display name (legacy) */
      name?: string;
      /** @description Password (will be hashed) */
      password: string;
    };
    PublicUserDto: {
      /**
       * @description Unique user identifier
       * @example cuid123
       */
      id: string;
      /**
       * @description Normalized user email
       * @example john@example.com
       */
      email: string;
      /**
       * @description Unique username slug
       * @example johndoe
       */
      username: string;
      /**
       * @description Role of the user (ADMIN|USER)
       * @example USER
       */
      role: string;
      /**
       * Format: date-time
       * @description Creation timestamp (ISO string)
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Last update timestamp (ISO string)
       */
      updatedAt: string;
    };
    LoginDto: {
      /**
       * @description Email address used for login
       * @example user@example.com
       */
      email: string;
      /** @description Password */
      password: string;
    };
    LoginResponseDto: {
      /**
       * @description JWT access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      accessToken: string;
      /** @description Authenticated user public profile */
      user: components["schemas"]["PublicUserDto"];
    };
    AdminCheckDto: {
      /**
       * @description Indicates the current user has ADMIN role
       * @example true
       */
      ok: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** List channels with optional search and pagination */
  ChannelController_list: {
    parameters: {
      query?: {
        search?: string;
        limit?: string;
        cursor?: string;
        includeArchived?: string;
      };
    };
    responses: {
      /** @description Paginated list of channels */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelListDto"];
        };
      };
    };
  };
  /** Create a new channel */
  ChannelController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChannelDto"];
      };
    };
    responses: {
      /** @description Channel created */
      201: {
        content: {
          "application/json": components["schemas"]["ChannelDto"];
        };
      };
    };
  };
  /** Soft delete a channel */
  ChannelController_remove: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Channel soft-deleted */
      204: {
        content: never;
      };
    };
  };
  /** Update a channel */
  ChannelController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateChannelDto"];
      };
    };
    responses: {
      /** @description Updated channel */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelDto"];
        };
      };
    };
  };
  /** Get all users (auth required) */
  UsersController_findAll: {
    responses: {
      /** @description List of users */
      200: {
        content: {
          "application/json": components["schemas"]["UserDto"][];
        };
      };
    };
  };
  /** Create a new user (ADMIN only) */
  UsersController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManagedUserDto"];
      };
    };
    responses: {
      /** @description User created */
      201: {
        content: {
          "application/json": components["schemas"]["UserDto"];
        };
      };
    };
  };
  /** Initialize the first admin user (only when no users exist) */
  AuthController_initAdmin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description Admin user created */
      201: {
        content: {
          "application/json": components["schemas"]["PublicUserDto"];
        };
      };
    };
  };
  /** Login and obtain a JWT access token */
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
    responses: {
      /** @description Authenticated with JWT token */
      201: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  /** Register a new user (ADMIN only) */
  AuthController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User created */
      201: {
        content: {
          "application/json": components["schemas"]["PublicUserDto"];
        };
      };
    };
  };
  /** Get current authenticated user profile */
  AuthController_me: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicUserDto"];
        };
      };
    };
  };
  /** Verify current user has ADMIN role */
  AuthController_adminCheck: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AdminCheckDto"];
        };
      };
    };
  };
}
